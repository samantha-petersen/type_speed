{"version":3,"sources":["component/SetMinutes.js","component/TextArea.js","component/Countdown.js","component/Statistics.js","component/App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","ButtonContainer","div","SetMinutes","getParagraphs","btnDisplay","className","id","onClick","Section","section","ParagraphsContainer","InputArea","textarea","TextColor","span","TextArea","paragraphs","userInput","typingDisplay","handleUserInput","document","querySelector","focus","map","string","i","color","length","style","backgroundColor","onChange","Timer","P","p","Countdown","seconds","calculatedMinutes","Math","floor","calculatedSeconds","displaySeconds","handleTimeDisplay","Title","h2","StatisticsContainer","Highlight","Statistics","statistics","statsDisplay","setMinutesDisplay","setStatsDisplay","accuracy","toFixed","slice","wpm","Heading","h1","SubHeading","Container","BackgroundContainer","defaultStats","App","useState","setParagraphs","setUserInput","setStatistics","minutesDisplay","textAreaDisplay","setTextAreaDisplay","inaccuracteCount","setInaccurateCount","setSeconds","min","setMin","isTimerOn","setIsTimerOn","intervalId","setIntervalId","handleInterval","setInterval","inaccuracyCounter","newValue","inputType","forEach","letter","handleAutoScroll","allSpanLetter","querySelectorAll","currentInputLocation","getBoundingClientRect","right","nextInputLocation","scrollTop","clearInterval","value","axios","get","1","3","5","then","res","array","data","responseObj","paragraph","join","split","e","target","nativeEvent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d1eee093.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst Button = styled.button`\n  font-family: 'Lato',sans-serif;\n  border: none;\n  margin: 0.5em;\n  background: var(--moss);\n  width: 200px;\n  height: 80px;\n  border-radius: 15px;\n  color: rgb(255 255 255);\n  font-size: 1em;\n  font-weight: 600;\n  transition: 0.35s;\n  &:hover {\n    background: var(--darkmoss);\n  }\n`\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--khaki);\n  height: 610px;\n  border-radius: 3em 1em 3em 1em;\n  width: 600px;\n  flex-direction: column;\n  margin: 0 auto;\n`\n\nfunction SetMinutes({ getParagraphs, btnDisplay }) {\n  return (\n    <ButtonContainer className='SetTimerBtn' id={btnDisplay ? null : 'hidden'}>\n      <Button onClick={() => getParagraphs(1)}>ONE MINUTE</Button>\n      <Button onClick={() => getParagraphs(3)}>THREE MINUTES</Button>\n      <Button onClick={() => getParagraphs(5)}>FIVE MINUTES</Button>\n    </ButtonContainer>\n  )\n}\n\nexport default SetMinutes","import styled from 'styled-components'\n\nconst Section = styled.section`\n  background: var(--khaki);\n  border-radius: 3em 1em 3em 1em;\n  height: 610px;\n  width: 600px;\n  margin: 0 auto;\n`\n\nconst ParagraphsContainer = styled.div`\n  width: 70%;\n  height: 480px;\n  margin: 0 auto;\n  font-size: 1.5em;\n  overflow-y: scroll;\n  overflow: hidden;\n  grid-column: 1;\n  grid-row: 1;\n  text-align: left;\n  line-height: 48px;\n  font-family: 'Be Vietnam Pro', sans-serif;\n  color: rgb(121 85 72);\n`\n\nconst InputArea = styled.textarea`\n  height: 480px;\n  margin: 0 auto;\n  width: 85%;\n  letter-spacing: 6px;\n  /* height: 50px; */\n  font-size: 1.5em;\n  resize: none;\n  opacity: 0;\n  cursor: default;\n  grid-column: 1;\n  grid-row: 1;\n  font-family: 'Be Vietnam Pro', sans-serif;\n  line-height: 1.8em;\n`\n\nconst TextColor = styled.span`\n  border-radius: 4px;\n  border: 1px solid var(--khaki);\n  padding: 0 2px;\n`\n\nfunction TextArea({ paragraphs, userInput, typingDisplay, handleUserInput }) {\n  const correctCol = 'rgb(189 223 177)'\n  const incorrectCol = 'rgb(252 186 164)'\n\n  if (typingDisplay) {\n    document.querySelector('textarea').focus()\n  }\n\n  return (\n    <Section className='game-container' id={typingDisplay ? null : 'hidden'}>\n      <ParagraphsContainer className='paragraphs'>\n        {paragraphs.map((string, i) => {\n          let color = ''\n          if (i < userInput.length) {\n            string === userInput[i] ? color = correctCol : color = incorrectCol\n          }\n          return (\n            <TextColor\n              className='letter'\n              style={{ backgroundColor: color }}\n              key={i + string}>{string}\n            </TextColor>\n          )\n        })}\n      </ParagraphsContainer>\n      <InputArea\n        className='text-input'\n        onChange={handleUserInput}\n      ></InputArea>\n    </Section>\n  )\n}\n\nexport default TextArea\n","import styled from 'styled-components'\n\nconst Timer = styled.div`\n  display: flex;\n  justify-content: center;\n  color: var(--moss);\n  font-size: 1.3em;\n  width: 50%;\n  gap: 10px;\n  margin: 22px auto;\n  letter-spacing: 3px;\n  border-top: 1px solid var(--moss);\n  border-bottom: 1px solid var(--moss);\n  padding: 0.5em;\n  position: relative;\n  top: -80px;\n`\n\nconst P = styled.p`\n  color: var(--moss);\n`\n\nfunction Countdown({ seconds }) {\n  let calculatedMinutes = Math.floor(seconds / 60)\n  let calculatedSeconds = seconds % 60\n\n  const handleTimeDisplay = () => {\n    let displaySeconds = calculatedSeconds < 10 ? `0${calculatedSeconds}` : calculatedSeconds\n    return `0${calculatedMinutes}:${displaySeconds}`\n  }\n\n  return (\n    <Timer>\n      <P>Timer</P>\n      <P>{handleTimeDisplay()}</P>\n    </Timer>\n  )\n}\n\nexport default Countdown","import styled from 'styled-components'\n\nconst Title = styled.h2`\n  color: var(--moss);\n  margin: 0;\n  font-size: 5em;\n  font-family: 'Abril Fatface';\n`\n\nconst StatisticsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 16px;\n  background: var(--khaki);\n  color: rgb(255 255 255);\n  height: 610px;\n  border-radius: 3em 1em 3em 1em;\n  width: 600px;\n  flex-direction: column;\n  margin: 0 auto;\n`\n\nconst Button = styled.button`\n  font-family: 'Lato',sans-serif;\n  border: none;\n  margin: 0.5em;\n  background: var(--moss);\n  width: 200px;\n  height: 80px;\n  border-radius: 15px;\n  color: rgb(255 255 255);\n  font-size: 1em;\n  font-weight: 600;\n  align-self: center;\n  transition: 0.35s;\n  &:hover {\n    background: var(--darkmoss);\n  }\n`\n\nconst Highlight = styled.span`\n  color: var(--chocolate);\n  border: none;\n  font-size: 1.5em;\n`\n\nfunction Statistics({ statistics, statsDisplay, setMinutesDisplay, setStatsDisplay }) {\n  const accuracy = statistics.accuracy < 1 ? statistics.accuracy.toFixed(2).slice(2) : 100\n  const wpm = statistics.wpm % 1 === 0 ? statistics.wpm : statistics.wpm.toFixed(1)\n\n  const again = () => {\n    setMinutesDisplay(true)\n    setStatsDisplay(false)\n  }\n\n  return (\n    <StatisticsContainer id={statsDisplay ? null : 'hidden'}>\n      <Title>Time's up!</Title>\n      <p>You typed with <Highlight>{wpm}</Highlight> WPM with <Highlight>{accuracy}%</Highlight> accuracy.</p>\n      <Button onClick={again}>TRY AGAIN</Button>\n    </StatisticsContainer>\n  )\n}\n\nexport default Statistics","import '../style/App.css';\nimport { useState } from 'react'\nimport SetMinutes from './SetMinutes.js'\nimport TextArea from './TextArea.js'\nimport Countdown from \"./Countdown\"\nimport axios from 'axios'\nimport styled from 'styled-components'\nimport Statistics from './Statistics'\n\nconst Section = styled.section`\n  text-align: -webkit-center;\n  position: relative;\n  top: -60px;\n`\n\nconst Heading = styled.h1`\n  color: var(--chocolate);\n  margin: 0;\n  font-size: 17em;\n  font-family: 'Abril Fatface';\n  font-weight: 200;\n`\n\nconst SubHeading = styled.h2`\n  color: var(--chocolate);\n  margin: 0;\n  font-size: 4em;\n  font-family: 'Abril Fatface';\n  font-weight: 200;\n  letter-spacing: 49px;\n  position: relative;\n  top: -70px;\n`\n\nconst Container = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 260px;\n`\nconst BackgroundContainer = styled.div`\n  position: relative;\n  left: 0;\n  right: 0;\n  bottom: -350px;\n  z-index: -1;\n`\n\nconst defaultStats = {\n  wpm: 0,\n  accuracy: 0\n}\n\nfunction App() {\n  // State for typing speed\n  const [paragraphs, setParagraphs] = useState([])\n  const [userInput, setUserInput] = useState([])\n  const [statistics, setStatistics] = useState(defaultStats)\n  // State for visibility components\n  const [minutesDisplay, setMinutesDisplay] = useState(true)\n  const [textAreaDisplay, setTextAreaDisplay] = useState(false)\n  const [statsDisplay, setStatsDisplay] = useState(false)\n  // State for inacuracy count\n  const [inaccuracteCount, setInaccurateCount] = useState(0)\n  // State for countdown\n  let [seconds, setSeconds] = useState(null)\n  const [min, setMin] = useState(0)\n  const [isTimerOn, setIsTimerOn] = useState(false)\n  // State for interval ID\n  const [intervalId, setIntervalId] = useState(null)\n\n  function getParagraphs(min) {\n    const amount = {\n      1: 5,\n      3: 20,\n      5: 30\n    }\n    axios.get(`/api/paragraphs/${amount[min]}`)\n      .then(res => {\n        const array = res.data.map(responseObj => responseObj.paragraph)\n        setParagraphs(array.join(' ').split(''))\n      })\n      .then(setMinutesDisplay(false), setTextAreaDisplay(true))\n      .then(setSeconds(min * 60), setMin(min))\n  }\n\n  function handleUserInput(e) {\n    const newValue = e.target.value.split('')\n    const inputType = e.nativeEvent.inputType\n\n    setUserInput(newValue)\n    handleInterval()\n    inaccuracyCounter(newValue, inputType)\n    handleAutoScroll(inputType)\n\n  }\n\n  const handleInterval = () => {\n    if (!isTimerOn && seconds > 0) {\n      let id = setInterval(() => {\n        seconds--\n        setSeconds(seconds)\n      }, 1000)\n      setIsTimerOn(true)\n      setIntervalId(id)\n    }\n  }\n\n  const inaccuracyCounter = (newValue, inputType) => {\n    newValue.forEach((letter, i) => {\n      if (inputType === 'insertText') {\n        letter !== paragraphs[i] ? setInaccurateCount(inaccuracteCount + 1) : setInaccurateCount(inaccuracteCount)\n      }\n    })\n  }\n\n  const handleAutoScroll = (inputType) => {\n    const allSpanLetter = document.querySelectorAll('.letter')\n    const currentInputLocation = allSpanLetter[userInput.length].getBoundingClientRect().right\n    const nextInputLocation = allSpanLetter[userInput.length + 1].getBoundingClientRect().right\n\n    if (inputType === 'deleteContentBackward' && currentInputLocation > nextInputLocation) {\n      document.querySelector('.paragraphs').scrollTop -= 46\n    } else if (currentInputLocation > nextInputLocation) {\n      document.querySelector('.paragraphs').scrollTop += 46\n    }\n  }\n\n  // Checks if there is an Interval ID & if the time has reached 0\n  if (intervalId != null) {\n    if (seconds === 0) {\n      end()\n    }\n  }\n\n  // Resets most State back to default value\n  function end() {\n    clearInterval(intervalId)\n    setIntervalId(null)\n    setIsTimerOn(false)\n    setSeconds(null)\n    setParagraphs([])\n    setUserInput([])\n    setInaccurateCount(0)\n    document.querySelector('textarea').value = null\n    setStatistics({\n      wpm: (userInput.length / 5) / min,\n      accuracy: (userInput.length - inaccuracteCount) / userInput.length\n    })\n    setStatsDisplay(true)\n    setTextAreaDisplay(false)\n    setMin(0)\n  }\n\n  return (\n    <Section>\n      <Heading>TYPING</Heading>\n      <Container className='content-container'>\n        <SetMinutes\n          getParagraphs={getParagraphs}\n          btnDisplay={minutesDisplay}\n        />\n        <TextArea\n          paragraphs={paragraphs}\n          userInput={userInput}\n          typingDisplay={textAreaDisplay}\n          handleUserInput={handleUserInput}\n          inaccuracteCount={inaccuracteCount}\n        />\n        <Statistics\n          statistics={statistics}\n          statsDisplay={statsDisplay}\n          setMinutesDisplay={setMinutesDisplay}\n          setStatsDisplay={setStatsDisplay}\n        />\n      </Container>\n      <BackgroundContainer>\n        <Heading>SPEED</Heading>\n        <SubHeading>TEST</SubHeading>\n        <Countdown\n          seconds={seconds}\n          isTimerOn={isTimerOn}\n        />\n      </BackgroundContainer>\n    </Section>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}